package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"SerieForge/entities"
	"SerieForge/graph/model"
	"SerieForge/resolvers"
	"context"
)

// CreateSeries is the resolver for the createSeries field.
func (r *mutationResolver) CreateSeries(ctx context.Context, input model.SeriesInput) (*entities.Series, error) {
	return resolvers.CreateSeries(ctx, input)
}

// Series is the resolver for the series field.
func (r *queryResolver) Series(ctx context.Context, input *model.SeriesFilter) ([]*entities.Series, error) {
	return resolvers.GetAllSeries(), nil
}

// ID is the resolver for the id field.
func (r *seriesResolver) ID(ctx context.Context, obj *entities.Series) (string, error) {
	return obj.Id.String(), nil
}

// ReleaseDate is the resolver for the ReleaseDate field.
func (r *seriesResolver) ReleaseDate(ctx context.Context, obj *entities.Series) (*string, error) {
	release := obj.ReleaseDate.String()
	return &release, nil
}

// EndDate is the resolver for the EndDate field.
func (r *seriesResolver) EndDate(ctx context.Context, obj *entities.Series) (*string, error) {
	end := obj.EndDate.String()
	return &end, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *seriesResolver) CreatedAt(ctx context.Context, obj *entities.Series) (*string, error) {
	created_at := obj.CreatedAt.String()
	return &created_at, nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *seriesResolver) UpdatedAt(ctx context.Context, obj *entities.Series) (*string, error) {
	update_at := obj.UpdatedAt.String()
	return &update_at, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Series returns SeriesResolver implementation.
func (r *Resolver) Series() SeriesResolver { return &seriesResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type seriesResolver struct{ *Resolver }
